version: '3.8'

services:
  # FastAPI Backend Server
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"  # FastAPI server
    environment:
      - PYTHONPATH=/app
      - BACKEND_HOST=0.0.0.0
      - BACKEND_PORT=8000
      - BACKEND_RELOAD=false
      - BACKEND_LOG_LEVEL=info
      - SIMULATION_NUM_AGENTS=100
      - DATABASE_PATH=/data/simulation.db
    volumes:
      - backend_data:/data
      - ./backend:/app/backend:ro
      - ./decentralized-ai-simulation:/app/decentralized-ai-simulation:ro
    networks:
      - simulation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Streamlit UI with 3D API Server
  streamlit:
    build:
      context: .
      dockerfile: streamlit/Dockerfile
    ports:
      - "8501:8501"  # Streamlit UI
      - "8502:8502"  # 3D API endpoints
      - "8503:8503"  # WebSocket server
    environment:
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - API_SERVER_PORT=8502
      - WEBSOCKET_SERVER_PORT=8503
      - SIMULATION_NUM_AGENTS=100
      - DATABASE_PATH=/data/simulation.db
    volumes:
      - streamlit_data:/data
      - ./decentralized-ai-simulation:/app/decentralized-ai-simulation:ro
      - ./backend:/app/backend:ro
    networks:
      - simulation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8502/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - backend

  # React Frontend (when available)
  # Uncomment and configure when frontend is ready for containerization
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: frontend/Dockerfile
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:8000
  #     - REACT_APP_WEBSOCKET_URL=ws://localhost:8000/ws/simulation
  #     - NODE_ENV=production
  #   volumes:
  #     - ./frontend:/app:ro
  #   networks:
  #     - simulation_network
  #   restart: unless-stopped
  #   depends_on:
  #     - backend

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - simulation_network
    restart: unless-stopped
    profiles:
      - with-cache

  # PostgreSQL for enhanced data storage (optional)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=simulation
      - POSTGRES_USER=simulation_user
      - POSTGRES_PASSWORD=simulation_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - simulation_network
    restart: unless-stopped
    profiles:
      - with-database

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - simulation_network
    restart: unless-stopped
    profiles:
      - with-nginx
    depends_on:
      - backend
      - streamlit

  # Monitoring with Prometheus and Grafana (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - simulation_network
    restart: unless-stopped
    profiles:
      - with-monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - simulation_network
    restart: unless-stopped
    profiles:
      - with-monitoring
    depends_on:
      - prometheus

volumes:
  backend_data:
    driver: local
  streamlit_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  simulation_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Profiles for different deployment scenarios
# Use these with: docker-compose --profile <profile> up
#
# Development profile (default)
# - Includes all services for local development
#
# Production profile
# - Optimized for production deployment
# - Includes monitoring and reverse proxy
#
# Minimal profile
# - Only essential services for testing